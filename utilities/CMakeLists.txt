include_directories("${OVS_Port_SOURCE_DIR}")
include_directories("${OVS_Port_SOURCE_DIR}/include")
include_directories("${OVS_Port_SOURCE_DIR}/lib")
include_directories("${OVS_Port_SOURCE_DIR}/ofproto")
include_directories("${OVS_Port_SOURCE_DIR}/ovsdb")
include_directories("${OVS_Port_SOURCE_DIR}/utilities")
link_directories("${OVS_Port_SOURCE_DIR}")
link_directories("${OVS_Port_SOURCE_DIR}/include")
link_directories("${OVS_Port_SOURCE_DIR}/lib")
link_directories("${OVS_Port_SOURCE_DIR}/ovsdb")
link_directories("${OVS_Port_SOURCE_DIR}/utilities")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
link_directories("$ENV{PATH}")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
include_directories("${OVS_Port_SOURCE_DIR}/windows")
link_directories("${OVS_Port_SOURCE_DIR}/windows")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
set(CMAKE_EXE_FLAGS "${CMAKE_EXE_FLAGS} -Wstrict-prototypes -Wall -Wno-sign-compare -Wpointer-arith -Wdeclaration-after-statement -Wformat-security -Wswitch-enum -Wunused-parameter -Wstrict-aliasing -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-field-initializers -Wno-override-init")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

add_executable (ovs-appctl ovs-appctl.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-appctl openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-appctl win_api openvswitch )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (ovs-dpctl ovs-dpctl.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-dpctl openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-dpctl win_api openvswitch )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (ovs-ofctl ovs-ofctl.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-ofctl ofproto openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-ofctl win_api ofproto openvswitch )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (ovs-vsctl ovs-vsctl.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-vsctl openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-vsctl win_api openvswitch )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (ovs-benchmark ovs-benchmark.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-benchmark openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-benchmark win_api openvswitch )#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (nlmon nlmon.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (nlmon openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (nlmon openvswitch win_api)#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

add_executable (ovs-vlan-bug-workaround ovs-vlan-bug-workaround.c)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries (ovs-vlan-bug-workaround openvswitch ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries (ovs-vlan-bug-workaround openvswitch win_api)#ssl crypto dl z rt m)
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")